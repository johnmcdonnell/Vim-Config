let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
vnoremap <buffer> \ro :call BuildROmniList("GlobalEnv")
nnoremap <buffer> \ro :call BuildROmniList("GlobalEnv")
onoremap <buffer> \ro :call BuildROmniList("GlobalEnv")
vnoremap <buffer> \sp :call RMakePDF()
nnoremap <buffer> \sp :call RMakePDF()
onoremap <buffer> \sp :call RMakePDF()
vnoremap <buffer> \sw :call RSweave()
nnoremap <buffer> \sw :call RSweave()
onoremap <buffer> \sw :call RSweave()
vnoremap <buffer> \rd :call RSetWD()
nnoremap <buffer> \rd :call RSetWD()
onoremap <buffer> \rd :call RSetWD()
vnoremap <buffer> \rb :call RAction("plot"):call RAction("summary")
nnoremap <buffer> \rb :call RAction("plot"):call RAction("summary")
onoremap <buffer> \rb :call RAction("plot"):call RAction("summary")
vnoremap <buffer> \rg :call RAction("plot")
nnoremap <buffer> \rg :call RAction("plot")
onoremap <buffer> \rg :call RAction("plot")
vnoremap <buffer> \rs :call RAction("summary")
nnoremap <buffer> \rs :call RAction("summary")
onoremap <buffer> \rs :call RAction("summary")
vnoremap <buffer> \rh :call RAction("help")
nnoremap <buffer> \rh :call RAction("help")
onoremap <buffer> \rh :call RAction("help")
vnoremap <buffer> \re :call RAction("example")
nnoremap <buffer> \re :call RAction("example")
onoremap <buffer> \re :call RAction("example")
vnoremap <buffer> \ra :call RAction("args")
nnoremap <buffer> \ra :call RAction("args")
onoremap <buffer> \ra :call RAction("args")
vnoremap <buffer> \rt :call RAction("str")
nnoremap <buffer> \rt :call RAction("str")
onoremap <buffer> \rt :call RAction("str")
vnoremap <buffer> \rn :call RAction("names")
nnoremap <buffer> \rn :call RAction("names")
onoremap <buffer> \rn :call RAction("names")
vnoremap <buffer> \rp :call RAction("print")
nnoremap <buffer> \rp :call RAction("print")
onoremap <buffer> \rp :call RAction("print")
vnoremap <buffer> \rm :call RClearAll()
nnoremap <buffer> \rm :call RClearAll()
onoremap <buffer> \rm :call RClearAll()
vnoremap <buffer> \rr :call SendCmdToScreen(""):echon
nnoremap <buffer> \rr :call SendCmdToScreen(""):echon
onoremap <buffer> \rr :call SendCmdToScreen(""):echon
vnoremap <buffer> \rl :call SendCmdToScreen("ls()"):echon
nnoremap <buffer> \rl :call SendCmdToScreen("ls()"):echon
onoremap <buffer> \rl :call SendCmdToScreen("ls()"):echon
noremap <buffer> \d :call SendLineToR("down")0
noremap <buffer> \l :call SendLineToR("stay")0
noremap <buffer> \pa :call SendParagraphToR("echo", "down")
noremap <buffer> \pd :call SendParagraphToR("silent", "down")
noremap <buffer> \pe :call SendParagraphToR("echo", "stay")
noremap <buffer> \pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> \sa :call SendSelectionToR("echo", "down")0
vnoremap <buffer> \sd :call SendSelectionToR("silent", "down")0
vnoremap <buffer> \se :call SendSelectionToR("echo", "stay")0
vnoremap <buffer> \ss :call SendSelectionToR("silent", "stay")0
vnoremap <buffer> \fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> \fa :call SendFunctionToR("echo", "down")
onoremap <buffer> \fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> \fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> \fd :call SendFunctionToR("silent", "down")
onoremap <buffer> \fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> \fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> \fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> \fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> \ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> \ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> \ff :call SendFunctionToR("silent", "stay")
noremap <buffer> \ba :call SendMBlockToR("echo", "down")
noremap <buffer> \bd :call SendMBlockToR("silent", "down")
noremap <buffer> \be :call SendMBlockToR("echo", "stay")
noremap <buffer> \bb :call SendMBlockToR("silent", "stay")
noremap <buffer> \ao :call ShowRout()
noremap <buffer> \ae :call SendFileToR("echo")
noremap <buffer> \aa :call SendFileToR("silent")
vnoremap <buffer> \rw :call RQuit('save')
nnoremap <buffer> \rw :call RQuit('save')
onoremap <buffer> \rw :call RQuit('save')
vnoremap <buffer> \rq :call RQuit('nosave')
nnoremap <buffer> \rq :call RQuit('nosave')
onoremap <buffer> \rq :call RQuit('nosave')
vnoremap <buffer> \rc :call StartR("custom")
nnoremap <buffer> \rc :call StartR("custom")
onoremap <buffer> \rc :call StartR("custom")
vnoremap <buffer> \rv :call StartR("vanilla")
nnoremap <buffer> \rv :call StartR("vanilla")
onoremap <buffer> \rv :call StartR("vanilla")
vnoremap <buffer> \rf :call StartR("R")
nnoremap <buffer> \rf :call StartR("R")
onoremap <buffer> \rf :call StartR("R")
inoremap <buffer> \ro :call BuildROmniList("GlobalEnv")a
inoremap <buffer> \sp :call RMakePDF()a
inoremap <buffer> \sw :call RSweave()a
inoremap <buffer> \rd :call RSetWD()a
inoremap <buffer> \rb :call RAction("plot"):call RAction("summary")a
inoremap <buffer> \rg :call RAction("plot")a
inoremap <buffer> \rs :call RAction("summary")a
inoremap <buffer> \rh :call RAction("help")a
inoremap <buffer> \re :call RAction("example")a
inoremap <buffer> \ra :call RAction("args")a
inoremap <buffer> \rt :call RAction("str")a
inoremap <buffer> \rn :call RAction("names")a
inoremap <buffer> \rp :call RAction("print")a
inoremap <buffer> \rm :call RClearAll()a
inoremap <buffer> \rr :call SendCmdToScreen(""):echona
inoremap <buffer> \rl :call SendCmdToScreen("ls()"):echona
inoremap <buffer> \q :call SendLineToR("stay")o
inoremap <buffer> \d :call SendLineToR("down")0i
inoremap <buffer> \l :call SendLineToR("stay")0i
inoremap <buffer> \pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> \pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> \pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> \pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> \fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> \fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> \fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> \ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> \ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> \bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> \be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> \bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> \ao :call ShowRout()a
inoremap <buffer> \ae :call SendFileToR("echo")a
inoremap <buffer> \aa :call SendFileToR("silent")a
inoremap <buffer> \rw :call RQuit('save')a
inoremap <buffer> \rq :call RQuit('nosave')a
inoremap <buffer> \rc :call StartR("custom")a
inoremap <buffer> \rv :call StartR("vanilla")a
inoremap <buffer> \rf :call StartR("R")a
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'r'
setlocal filetype=r
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,.
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=rcomplete#CompleteR
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal noscrollbind
setlocal shiftwidth=8
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'r'
setlocal syntax=r
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 18) / 36)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
